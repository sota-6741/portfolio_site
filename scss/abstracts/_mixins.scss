@use "sass:map";
@use "./fanctions" as f;
@use "./variables" as *;

@mixin title-borderline($line-color: f.color(color-borderline)) {
    position: relative;

    // 1本目の線（長い線）- 調整値分下に配置
    &::after {
        content: "";
        position: absolute;
        bottom: f.fluid-clamp(f.layout(borderline-first-bottom-sp), f.layout(borderline-first-bottom));
        left: 0;
        width: f.fluid-clamp(f.layout(longline-width-sp), f.layout(longline-width));
        height: f.layout(borderline-height);
        background: $line-color;
    }

    // 2本目の線（短い線）- 長い線からspace分さらに下
    &::before {
        content: "";
        position: absolute;
        bottom: f.fluid-clamp(f.layout(borderline-second-bottom-sp), f.layout(borderline-second-bottom));
        left: 0;
        width: f.fluid-clamp(f.layout(shortline-width-sp), f.layout(shortline-width));
        height: f.layout(borderline-height);
        background: $line-color;
    }

    @content;
}

@mixin arrow-borderline {
    position: relative;

    &::after {
        content: "";
        position: absolute;
        width: 115%;
        height: 10px;
        border-bottom: 1px solid f.color(color-font-base);
        border-right: 1px solid f.color(color-font-base);
        /* 傾きを調節 */
        transform: skew(60deg);
        /* 下線矢印の位置補正 */
        left: -5px;
        bottom: -2px;
    }
    @content;
}

@mixin borderline {
    &::after {
        content: "";
        position: absolute;
        width: 100%;
        height: 2px;
        background-color: f.color(color-borderline);
    }
    @content;
}

@mixin button($string-color: f.color(color-font-base), $background-color: f.color(color-base)) {
    position: relative;
    display: flex;
    justify-content: space-around;
    align-items: center;
    font-size: f.typography(font-size-text-lg);
    border-radius: f.layout(radius-base);

    color: $string-color;
    background-color: $background-color;

    @content;
}

@mixin arrow-icon(
    $pseudo: after,
    $angle: 45deg,
    $stroke: 3px,
    $length: 1.2rem,
    $offset-x: 0,
    $color: f.color(swiper-gray)
) {
    &::#{$pseudo} {
        content: "";
        display: block;
        width: $length;
        height: $length;
        border: solid $color;
        border-width: $stroke $stroke 0 0;
        transform: translateX($offset-x) rotate($angle);
    }
}

/* メディアクエリ */
@mixin break-point($key) {
    @media #{map.get($tokens-breakpoint, $key)} {
        @content;
    }
}